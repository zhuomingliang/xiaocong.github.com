<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: phantom.js | 葱丝瓣酱]]></title>
  <link href="http://xiaocong.github.com/blog/categories/phantom-js/atom.xml" rel="self"/>
  <link href="http://xiaocong.github.com/"/>
  <updated>2012-08-14T15:09:14+08:00</updated>
  <id>http://xiaocong.github.com/</id>
  <author>
    <name><![CDATA[Xiaocong He]]></name>
    <email><![CDATA[xiaocong@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Requirejs/Backbone/Jasmine前端项目和持续继承]]></title>
    <link href="http://xiaocong.github.com/blog/2012/07/20/integrate-requirejs-slash-backbone-slash-jasmine-front-end-project-with-ci-using-bbb-slash-gruntjs/"/>
    <updated>2012-07-20T11:03:00+08:00</updated>
    <id>http://xiaocong.github.com/blog/2012/07/20/integrate-requirejs-slash-backbone-slash-jasmine-front-end-project-with-ci-using-bbb-slash-gruntjs</id>
    <content type="html"><![CDATA[<p><a href="http://xiaocong.github.com/examples/coffee-bbb-amd-backbone-rest-contacts/dist/release/">Contact</a>(<a href="https://github.com/xiaocong/xiaocong.github.com/tree/master/examples/coffee-bbb-amd-backbone-rest-contacts">源代码</a>)示例项目使用了<a href="https://github.com/backbone-boilerplate/grunt-bbb">bbb</a>作为项目构建工具,
作为<a href="https://github.com/cowboy/grunt">gruntjs</a>的扩展, <a href="https://github.com/backbone-boilerplate/grunt-bbb">bbb</a>能很方便地完成:</p>

<ul>
<li>Coffeescript的编译</li>
<li>文件的清除和复制</li>
<li>源代码lint</li>
<li>编译LESS</li>
<li>优化requirejs模块</li>
<li>js/css文件的合并和优化</li>
<li>文件的压缩, 打包</li>
<li>内置调试http服务器</li>
</ul>


<p>并且项目中还使用<a href="https://github.com/backbone-boilerplate/grunt-bbb">bbb</a>进行<a href="http://pivotal.github.com/jasmine/">jasmine</a>单元测试代码的编译. 所有的操作都可以通过定义<a href="https://github.com/backbone-boilerplate/grunt-bbb">bbb</a>任务并以命令行方式进行运行, 唯一的一个例外是<a href="http://pivotal.github.com/jasmine/">jasmine</a>测试执行需要启动浏览器执行.
如果要在项目中实施持续集成, 就必须不能依赖浏览器而以命令行方式执行测试.</p>

<p>曾经尝试过<a href="http://www.envjs.com/">envjs</a>, 但在当前的实现中, <a href="http://www.envjs.com/">envjs</a>还不能顺利运行<a href="http://requirejs.org/">requirejs</a>的异步模块加载(<a href="https://github.com/envjs/env-js/issues/7">issue</a>).
<a href="http://phantomjs.org/">Phantomjs</a>是另外一种方案, 它可以很顺利地集成<a href="http://pivotal.github.com/jasmine/">jasmine</a>以及<a href="http://requirejs.org/">requirejs</a>, 但是如果需要集成得很好, 必须得实现一个<a href="http://pivotal.github.com/jasmine/">jasmine</a>的<code>reporter</code>用来和<a href="http://phantomjs.org/">Phantomjs</a>进行通讯,
并且还得实现一个<a href="https://github.com/cowboy/grunt">gruntjs</a>任务插件, 用来调用<a href="http://phantomjs.org/">Phantomjs</a>执行测试, 以及生成测试报告. 这个工作量不大, 我也曾经完成了一个最简单的<a href="https://github.com/cowboy/grunt">gruntjs</a>任务来调用<a href="http://phantomjs.org/">Phantomjs</a>. 正在想着怎样进行重构的时候,
突然发现最新的<a href="https://github.com/backbone-boilerplate/grunt-bbb">bbb</a>已经悄然导入了<a href="https://github.com/creynders/grunt-jasmine-task">grunt-jasmine-task</a>, 一个利用<a href="http://phantomjs.org/">Phantomjs</a>执行<a href="http://pivotal.github.com/jasmine/">jasmine</a>测试的<a href="https://github.com/cowboy/grunt">gruntjs</a>任务插件.</p>

<p>Ok, 那一切就简单了. 现在仅仅需要修改<code>grunt.js</code>配置文件来定义项目的<code>jasmine</code>任务. 当然, 之前必须安装<a href="http://phantomjs.org/">Phantomjs</a>(<a href="https://github.com/cowboy/grunt">gruntjs</a>网站上有关于如何安装的<a href="https://github.com/cowboy/grunt/blob/master/docs/faq.md#why-does-grunt-complain-that-phantomjs-isnt-installed">faq</a>).
``` javascript
  grunt.initConfig({</p>

<pre><code>// jasmine task is to run specs using phantom, before running it, you must
// make sure you have installed phantom following instruction on
// https://github.com/cowboy/grunt/blob/master/docs/faq.md#why-does-grunt-complain-that-phantomjs-isnt-installed
jasmine: {
  all: {
    src:['http://localhost:8000/tests/SpecRunner.html'],
    timeout: 300000 //in milliseconds
  }
}
</code></pre>

<p>  });</p>

<p><code>
启动`http`服务:
</code> bash
$ ./node_modules/bbb/bin/bbb server
Running "server" task
Listening on http://127.0.0.1:8000</p>

<p><code>
然后在另一个终端运行`jasmine`任务:
</code> bash
$ ./node_modules/bbb/bin/bbb jasmine
Running "jasmine:all" (jasmine) task
Running specs for SpecRunner.html
.............</p>

<blockquote><blockquote><p>31 assertions passed in 13 specs (1451ms)</p></blockquote></blockquote>

<p>Done, without errors.</p>

<p>```</p>

<p>在CI系统中, 一种可行的做法是使用<code>shell</code>脚本或者<code>Makefile</code>, 先启动<code>http</code>服务, 然后异步执行测试. 这是一个可行的方案, 但是<code>grunt.js</code>本身就是一个命令行工具, 为什么还要用<code>shell</code>或者<code>make</code>了?</p>

<p><code>grunt.js</code>支持<code>alias task</code>, 我们可以这样定义一个任务别名:
<code>javascript
grunt.registerTask('test', 'default server jasmine');
</code>
执行<code>test</code>任务等价于按照顺序执行<code>default</code>, <code>server</code>, <code>jasmine</code>任务. 我们希望这样能工作, 可惜的是, <code>bbb</code>的<code>server</code>任务是阻塞式的, 不会退出,
也就是说, 在它后面的<code>jasmine</code>任务永远不会被执行.</p>

<p>我们希望执行一个<code>server</code>任务, 它能异步启动一个非阻塞的<code>http</code>服务, 后面的任务可以使用这个服务, 并且当<code>grunt</code>进程退出的时候, 该<code>http</code>服务能自动退出.
下面代码是用<code>node</code>的<code>connect</code>实现的满足这个要求的<code>staticserver</code>任务:
``` javascript staticserver.js
/<em>
 * grunt
 * https://github.com/cowboy/grunt
 *
 * Copyright (c) 2012 "Cowboy" Ben Alman
 * Licensed under the MIT license.
 * http://benalman.com/about/license/
 </em>/</p>

<p>module.exports = function(grunt) {</p>

<p>  // Nodejs libs.
  var path = require('path');</p>

<p>  // External libs.
  var connect = require('connect');</p>

<p>  // ==========================================================================
  // TASKS
  // ==========================================================================</p>

<p>  grunt.registerTask('staticserver', 'Start a static web server.', function() {</p>

<pre><code>// Get values from config, or use defaults.
var port = grunt.config('server.port') || 8000;
var base = path.resolve(grunt.config('server.base') || '.');

var middleware = [
  // Serve static files.
  connect.static(base),
  // Make empty directories browsable. (overkill?)
  connect.directory(base)
];

// If --debug was specified, enable logging.
if (grunt.option('debug')) {
  connect.logger.format('grunt', ('[D] server :method :url :status ' +
    ':res[content-length] - :response-time ms').magenta);
  middleware.unshift(connect.logger('grunt'));
}

// Start server.
grunt.log.writeln('Starting static web server on port ' + port + '.');
connect.apply(null, middleware).listen(port);
</code></pre>

<p>  });</p>

<p>};</p>

<p><code>``
假如你看过[gruntjs][]的代码, 你应当能看出来, 这其实就是[gruntjs][]自带的</code>server<code>任务, 只是为了避免和</code>bbb<code>的</code>server<code>任务命名冲突, 这里将任务注册的名称从</code>server<code>换成了</code>staticserver`.</p>

<p>将<code>staticserver.js</code>文件和其他<code>gruntjs</code> <code>task</code>文件一样存放在<code>&lt;工程目录&gt;/tasks</code>目录下, 确保这个任务能正确加载. 然后, 如下注册一个<code>alias task</code>命名为<code>test</code>:
``` javascript
  // Register test task, which will compile app and run the server and then do test.
  // Here we use 'staticserver' task (pure grunt static server) for testing.
  grunt.registerTask('test', 'default staticserver jasmine');</p>

<p><code>
运行这个`test`任务就能到下面的输出:
</code>
$ ./node_modules/bbb/bin/bbb test
Running "clean:0" (clean) task
Removing: app
Removing: dist/debug
Removing: dist/release
Removing: tests/js</p>

<p>Running "clean:1" (clean) task
Removing: app
Removing: dist/debug
Removing: dist/release
Removing: tests/js</p>

<p>Running "clean:2" (clean) task
Removing: app
Removing: dist/debug
Removing: dist/release
Removing: tests/js</p>

<p>Running "clean:3" (clean) task
Removing: app
Removing: dist/debug
Removing: dist/release
Removing: tests/js</p>

<p>Running "coffee:app" (coffee) task</p>

<p>Running "lint:beforeconcat" (lint) task
Lint free.</p>

<p>Running "coffee:spec" (coffee) task</p>

<p>Running "staticserver" task
Starting static web server on port 8000.</p>

<p>Running "jasmine:all" (jasmine) task
Running specs for SpecRunner.html
.............</p>

<blockquote><blockquote><p>31 assertions passed in 13 specs (2256ms)</p></blockquote></blockquote>

<p>Done, without errors.</p>

<p>```</p>

<h2>参考</h2>

<ul>
<li><a href="https://github.com/xiaocong/xiaocong.github.com/tree/master/examples/coffee-bbb-amd-backbone-rest-contacts">示例程序源代码</a></li>
<li><a href="https://github.com/backbone-boilerplate/grunt-bbb">bbb</a></li>
<li><a href="https://github.com/cowboy/grunt">gruntjs</a></li>
<li><a href="http://phantomjs.org/">Phantomjs</a></li>
</ul>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | 葱丝瓣酱]]></title>
  <link href="http://xiaocong.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://xiaocong.github.com/"/>
  <updated>2012-07-09T14:10:47+08:00</updated>
  <id>http://xiaocong.github.com/</id>
  <author>
    <name><![CDATA[Xiaocong He]]></name>
    <email><![CDATA[xiaocong@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python mixin and MRO]]></title>
    <link href="http://xiaocong.github.com/blog/2012/06/13/python-mixin-and-mro/"/>
    <updated>2012-06-13T23:09:00+08:00</updated>
    <id>http://xiaocong.github.com/blog/2012/06/13/python-mixin-and-mro</id>
    <content type="html"><![CDATA[<h2>什么是 mixin ?</h2>

<p><blockquote><p>In object-oriented programming languages, a mixin is a class that provides a certain functionality to be inherited or just reused by a subclass, while not meant for instantiation (the generation of objects of that class). Mixins are synonymous with abstract base classes. Inheriting from a mixin is not a form of specialization but is rather a means of collecting functionality. A class or object may "inherit" most or all of its functionality from one or more mixins, therefore mixins can be thought of as a mechanism of multiple inheritance.</p><footer><strong>Wikipedia</strong> <cite><a href='http://en.wikipedia.org/wiki/Mixin'>Mixin</a></cite></footer></blockquote></p>

<p>简单的说, mixin 是一种类的多继承的机制.</p>

<h2>什么时候需要 mixin ?</h2>

<p>就如<a href="http://stackoverflow.com/questions/533631/what-is-a-mixin-and-why-are-they-useful">stackoveflow</a>
上的回答, 有两个主要的使用 mixin 的场景:</p>

<ul>
<li>你希望给一个类提供很多可选的特征(feature).</li>
<li>你希望在很多不同的类中使用一个特定的特征(feature).</li>
</ul>


<!--more-->


<p>例如, <a href="http://werkzeug.pocoo.org/docs/wrappers/">werkzeug</a> 的<code>request</code>, <code>response</code>系统.
我们可以实现简单<code>request</code>如下:</p>

<p>``` python
from werkzeug import BaseRequest</p>

<p>class Request(BaseRequest):</p>

<pre><code>pass
</code></pre>

<p>```</p>

<p>如果我们希望支持<code>accept header</code>, 可以这样实现:
``` python
from werkzeug import BaseRequest, AcceptMixin</p>

<p>class Request(BaseRequest, AcceptMixin):</p>

<pre><code>pass
</code></pre>

<p>```</p>

<p>如果我们希望<code>request</code>对象支持<code>accept header</code>, <code>etags</code>, <code>authentication</code>, <code>user agent</code>, 可以这样实现:
``` python
from werkzeug import BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthorizationMixin</p>

<p>class Request(BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthorizationMixin):</p>

<pre><code>pass
</code></pre>

<p>```</p>

<h2>Mixin 的实现</h2>

<p>假定我们有下面两个类需要mixin:
``` python
class Base(object):</p>

<pre><code>pass
</code></pre>

<p>class FeatureMixin(object):</p>

<pre><code>pass
</code></pre>

<p>```</p>

<ul>
<li><p>直接定义一个类 mixin 所有的 feature
<code>python
class MyClass(Base, FeatureMixin):
  pass
</code></p></li>
<li><p>通过闭包动态定义类来实现 Mixin
``` python
def mixin(base, mixin, name):
  class MixinClass(base, mixin):</p>

<pre><code>  pass
</code></pre>

<p>  MixinClass.<strong>name</strong> = name
  return MixinClass</p></li>
</ul>


<p>MyClass = mixin(Base, FeatureMixin, 'MyClass')
```</p>

<ul>
<li><p>使用<code>type</code>动态构造类来实现 Mixin
<code>python
MyClass = type('MyClass', (Base, FeatureMixin), {})
</code></p></li>
<li><p>更改<code>__bases__</code>来实现 Mixin. <em>只能 mixin <code>classic class</code></em>
``` python
class Base(object):
  pass</p></li>
</ul>


<p>class FeatureMixin: # not inherite from object</p>

<pre><code>pass
</code></pre>

<p>Base.<strong>bases</strong> += (FeatureMixin,) # then Base should have FeatureMixin
```</p>

<h2>MRO(Method Resolution Order)</h2>

<p><blockquote><p>In object-oriented programming languages with multiple inheritance, the diamond problem (sometimes referred to as the "deadly diamond of death") is an ambiguity that arises when two classes B and C inherit from A, and class D inherits from both B and C. If D calls a method defined in A (and does not override the method), and B and C have overridden that method differently, then from which class does it inherit: B, or C?</p><footer><strong>Wikipedia</strong> <cite><a href='http://en.wikipedia.org/wiki/Diamond_problem'>Diamond Problem</a></cite></footer></blockquote></p>

<p>多继承时, 运行环境必须知道调用哪一个父类的方法. Python2.3开始采用<code>C3</code>方法解析顺序(<a href="http://www.python.org/getit/releases/2.3/mro/">Method Resolution Order</a>, 简称MRO)来动态解析调用的方法.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>O = object
class A(O): pass
class B(O): pass
class X(A,B): pass
class Y(B,A): pass
X.mro()
[<class '__main__.X'>, <class '__main__.A'>, <class '__main__.B'>, <type 'object'>]
Y.mro()
[<class '__main__.Y'>, <class '__main__.B'>, <class '__main__.A'>, <type 'object'>]
```</p></blockquote></blockquote></blockquote>

<p>参照上面代码执行的结果, 我们可以看出, <code>class X</code>的 MRO 是 <code>&lt;class '__main__.X'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;type 'object'&gt;</code>.
当我们调用<code>X</code>实例对象的某个方法, 运行环境会按照<code>X, A, B, object</code>顺序解析该方法. 越左边的越优先,
也就是说如果只有<code>A</code>, <code>B</code>定义了这个方法, 系统会选择最先解析到的方法, 也就是<code>A</code>的方法定义.
同样, <code>class Y</code>的 MRO 是 <code>&lt;class '__main__.Y'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;</code>,
对于<code>Y</code>来说, <code>B</code>的方法要优先于<code>A</code>进行解析.</p>

<p>上面定义的类<code>X</code>和<code>Y</code>对<code>A</code>和<code>B</code>的方法解析顺序是刚好相反的, 如果有一个类继承于<code>X</code>和<code>Y</code>会出现什么结果?</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>class M(X, Y): pass
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Error when calling the metaclass bases</p>

<pre><code>Cannot create a consistent method resolution
</code></pre>

<p>order (MRO) for bases B, A
<code>``
上面的错误说明, 类的继承必须保持一致的 MRO. 由于基类</code>X<code>和</code>Y<code>的 MRO 有冲突, 因此我们不可能从</code>X<code>和</code>Y`继承另外一个类.</p></blockquote></blockquote></blockquote>

<p>关于 MRO 的算法可以参考官网上的<a href="http://www.python.org/getit/releases/2.3/mro/">Python 2.3 方法解析顺序</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metaclasses in Python]]></title>
    <link href="http://xiaocong.github.com/blog/2012/06/12/python-metaclass/"/>
    <updated>2012-06-12T22:26:00+08:00</updated>
    <id>http://xiaocong.github.com/blog/2012/06/12/python-metaclass</id>
    <content type="html"><![CDATA[<h2>什么是 metaclass ?</h2>

<p><blockquote><p>In object-oriented programming, a metaclass is a class whose instances are<br/>classes. Just as an ordinary class defines the behavior of certain objects, a<br/>metaclass defines the behavior of certain classes and their instances.</p><footer><strong>Wikipedia</strong> <cite><a href='http://en.wikipedia.org/wiki/Metaclass'>Metaclass</a></cite></footer></blockquote></p>

<p>简单的说, metaclass 就是 class 类型对象的 class, metaclass 的实例对象是 class 类型对象.</p>

<h2>metaclass 能用来做什么 ?</h2>

<p>我们就可以用 metaclass 来动态生成或者更改 class 的定义.</p>

<p>下面分别是通过传统 class 方式以及 metaclass 动态定义类 <code>A</code>
``` python 传统 class 方式定于类 A
class A(object):</p>

<pre><code>a = 'I am a string.'
</code></pre>

<p>```</p>

<p><code>python metaclass 动态定义类 `A`
A = type('A', (object,), {'a': 'I am a string.'})
</code></p>

<p>上面我们通过<code>type</code>类的实例化来生成类<code>A</code>, 如果我们想自定义类的生成, 我们可以以<code>type</code>类为基
类派生出自定义的 metaclass.</p>

<p><em>注: 本文所有代码在 python2.6 下能执行通过, 不能确保在 python3 下无误.</em></p>

<!-- more -->


<h2>继承<code>type</code>类实现 metaclass</h2>

<p>我们可以从<code>type</code>类派生出新的 metaclass, 然后通过重新实现<code>__new__</code>, <code>__init__</code>,
<code>__call__</code>来实现类或者类实例的生成.</p>

<p>``` python Meta类 meta.py
class Meta(type):</p>

<pre><code>def __call__(self):
    print 'Enter Meta.__call__: ', self
    obj = type.__call__(self)
    print 'Exit Meta.__call__: ', obj
    return obj

def __new__(metacls, name, bases, dictionary):
    print 'Enter Meta.__new__:', metacls, name, bases, dictionary
    newClass = type.__new__(metacls, name, bases, dictionary)
    print 'Exit Meta.__new__: ', newClass
    return newClass

def __init__(cls, name, bases, dictionary):
    print 'Enter Meta.__init__: ', cls, name, bases, dictionary
    super(Meta, cls).__init__(name, bases, dictionary)
    print 'Exit Meta.__init__'
</code></pre>

<p>print 'Create class A'
A = Meta('A', (object,), {})</p>

<p>print
print 'Create instance of class A'
A()
```</p>

<p>当我们运行上述的python文件, 会得到下面的输出结果:
``` bash
$ python meta.py
Create class A
Enter Meta.<strong>new</strong>: <class '__main__.Meta'> A (<type 'object'>,) {}
Exit Meta.<strong>new</strong>:  <class '__main__.A'>
Enter Meta.<strong>init</strong>:  <class '__main__.A'> A (<type 'object'>,) {}
Exit Meta.<strong>init</strong></p>

<p>Create instance of class A
Enter Meta.<strong>call</strong>:  <class '__main__.A'>
Exit Meta.<strong>call</strong>:  &lt;<strong>main</strong>.A object at 0xb76a9ccc>
$
```</p>

<p>通过上面的输出结果, 我们可以看出:</p>

<ul>
<li><code>Meta.__new__</code>是用来生成类<code>A</code>的<strong>类型对象</strong>, 我们可以在调用<code>type.__new__</code>之前更改
<code>dictionary</code>变量来增加/修改/删除新生成类<code>A</code>的成员变量/方法.</li>
<li><code>Meta.__new__</code>是在生成类<code>A</code>的<strong>类型对象</strong>后被调用类进行类<code>A</code>的初始化. 第一个参数<code>cls</code>
是已经生成的类<code>A</code>类型对象, 可以通过直接修改<code>cls</code>来修改类的定义, 例如增加成员变量.</li>
<li><code>Meta.__call__</code>是在生成类<code>A</code>的<strong>实例对象</strong>时被调用的, 通过调用<code>type.__call__</code>可以
生成该实例对象<code>obj</code>, 之后我们可以直接修改<code>obj</code>来实现实例对象的自定义.</li>
</ul>


<h2>如何使用 metaclass ?</h2>

<ul>
<li>我们可以直接调用<code>type</code>或者<code>Meta</code>来<em>动态</em>生成新的类型对象<code>A</code>:</li>
</ul>


<p><code>python 实例化Meta来生成新的类
A = Meta('A', (object,), {})
</code></p>

<ul>
<li>在定义类的时候, 重新指定该类的<code>__metaclass__</code>属性为<code>Meta</code>:</li>
</ul>


<p>``` python 构建类的<strong>metaclass</strong>
class A(object):</p>

<pre><code>__metaclass__ = Meta
# other member variables/methods definition
</code></pre>

<p>```</p>

<p>注意: 定义<code>__metaclass__</code>生成的类<code>A</code>会增加<code>_A__metaclass</code>成员变量, 在某些场景下需要
了解到这个区别.</p>

<h2>函数方式定义类的 metaclass</h2>

<p>类的<code>__metaclass__</code>可以是一个<code>type</code>类型的子类, 也可以是一个函数, 该函数接受三个参数:</p>

<ul>
<li><em>name</em>: 字符串类型, 表示新生成类型对象的名称</li>
<li><em>bases</em>: tuple类型, 新生成类型对象的父类列表</li>
<li><em>properties</em>: 字典类型, 新生成类型对象的属性</li>
</ul>


<p>该函数必须返回新生成的类型对象. 下面例子是一个简单实现:</p>

<p>``` python
def meta_func(name, bases, properties):</p>

<pre><code># you can modify bases, properties here to overide class creation
return type(name, bases, properties)
</code></pre>

<p>class A(object):</p>

<pre><code>__metaclass__ = meta_func
</code></pre>

<p>```</p>

<h2>使用 metaclass 的案例</h2>

<ul>
<li>动态修改类的方法和属性, 例如给方法增加<code>decorator</code></li>
<li>类的序列化和反序列化</li>
<li>在生成类的时候进行接口检查和接口注册</li>
<li>对第三方库进行<code>monkey patch</code></li>
<li>生成代理类</li>
<li>动态mixin</li>
<li>控制实例对象的生成, 例如单体实例, 监控所有生成的实例对象</li>
</ul>


<p>搜索<a href="http://stackoverflow.com/search?tab=votes&amp;q=python%20metaclass">stackoverflow</a>
能找到大量使用 metaclass 的设计模式.</p>

<h2>使用 metaclass 的原则</h2>

<p>metaclass 会降低代码的可读性, 并且很多使用 metaclass 的场景都有替代方案, 因此必须牢记下面的
忠告:</p>

<p><blockquote><p>Metaclasses are deeper magic than 99% of users should ever worry about. If you wonder whether you need them, you don’t (the people who actually need them know with certainty that they need them, and don’t need an explanation about why).</p><footer><strong>Tim Peters</strong> <cite>Python Guru</cite></footer></blockquote></p>

<h2>参考</h2>

<ul>
<li><a href="http://gnosis.cx/publish/programming/metaclass_1.html">Metaclass Programming In Python</a></li>
<li><a href="http://en.wikipedia.org/wiki/Metaclass">Wikipedia: Metaclass</a></li>
<li><a href="http://www.vrplumber.com/programming/metaclasses.pdf">Python Metaclasses: Who? Why? When?</a></li>
</ul>

]]></content>
  </entry>
  
</feed>

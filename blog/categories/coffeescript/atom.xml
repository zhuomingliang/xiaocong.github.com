<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coffeescript | 葱丝瓣酱]]></title>
  <link href="http://xiaocong.github.com/blog/categories/coffeescript/atom.xml" rel="self"/>
  <link href="http://xiaocong.github.com/"/>
  <updated>2012-07-09T14:00:37+08:00</updated>
  <id>http://xiaocong.github.com/</id>
  <author>
    <name><![CDATA[Xiaocong He]]></name>
    <email><![CDATA[xiaocong@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用jasmine+sinon测试backbone+requirejs项目]]></title>
    <link href="http://xiaocong.github.com/blog/2012/07/06/testing-backbone-and-requirejs-with-jasmine/"/>
    <updated>2012-07-06T00:32:00+08:00</updated>
    <id>http://xiaocong.github.com/blog/2012/07/06/testing-backbone-and-requirejs-with-jasmine</id>
    <content type="html"><![CDATA[<p>我们必须为自己的代码写自动测试代码, 并且需要持续地对自己的代码进行回归测试, 因为:</p>

<ul>
<li>项目成员对模块间接口的理解必须一致, 测试代码是最好的文档.</li>
<li>谁都没十足的把握保证自己的修改不影响别人的代码.</li>
<li>没有快速而充分的测试作为保障, 就很难提倡快速重构.</li>
<li>让代码成为资产, 而不是债务, 减少代码的维护成本.</li>
<li>每个人都必须为自己的代码负责.</li>
</ul>


<p>那么基于<a href="http://backbonejs.com/" title="Backbone.js">backbone</a>+<a href="http://requirejs.org/" title="Require.js">requirejs</a>的前端项目应当如何实施测试?</p>

<p>当前已经有很多非常优秀的javascript测试框架, 包括<a href="http://pivotal.github.com/jasmine/">jasmine</a>,
<a href="http://docs.jquery.com/QUnit">QUnit</a>, <a href="http://visionmedia.github.com/mocha/">mocha</a>.
<a href="http://backbonejs.com/" title="Backbone.js">backbone</a>和<a href="http://requirejs.org/" title="Require.js">requirejs</a>的前端项目可以使用上述任何一种测试框架. 技术经理可以根据团队成员的技术背景, 喜好来决定选择哪一种测试框架.</p>

<p>下面就以<a href="/examples/coffee-bbb-amd-backbone-rest-contacts/index.html">Contacts</a>应用为例,
简单demo如何在项目中实现基于<a href="http://pivotal.github.com/jasmine/">jasmine</a>+<a href="http://sinonjs.org/" title="sinon.js">sinon</a>的测试用例.</p>

<ul>
<li><a href="https://github.com/xiaocong/xiaocong.github.com/tree/master/examples/coffee-bbb-amd-backbone-rest-contacts">源码</a></li>
<li><a href="/examples/coffee-bbb-amd-backbone-rest-contacts/tests/SpecRunner.html">测试执行demo</a></li>
</ul>


<h2>工程的目录结构</h2>

<p>``` bash
|-coffee                # web应用coffeescript源代码
|-app                   # coffee编译之后的web应用js文件
|-dist
   |-debug              # concat所有js文件到一个js文件, 但未作minize
   |-release            # concat所有js文件到一个js文件, 并且minize
|-assets                # jquery/requirejs/underscore/backbone等库文件
|-tests
   |-coffee             # 测试程序的coffeescript源代码</p>

<pre><code>  |-config.coffee   # requirejs配置文件
  |-runner.coffee   # 按照requirejs模块定义规范定义的jasmine测试执行模块
</code></pre>

<p>   |-js                 # coffee编译之后的测试程序js文件
   |-lib                # jasmine/sinon等测试用库文件
   |-SpecRunner.html    # 测试html文件, 用来执行broqser端测试代码
|-index.html            # app html文件
|-favicon.ico
|-grunt.js              # grunt任务配置文件
```</p>

<h2>按照<a href="http://requirejs.org/" title="Require.js">requirejs</a>的模块定义方式定义<em>测试模块</em></h2>

<p>由于<em>被测模块</em>是由<a href="http://requirejs.org/" title="Require.js">requirejs</a>进行加载的, 因此, 我们也可以遵循<a href="http://requirejs.org/" title="Require.js">requirejs</a>的模块定义方式定义<em>测试模块</em>, 确保<em>被测模块</em>在<em>测试模块</em>前加载完成:
``` coffeescript model_spec.coffee
define [use!underscore', 'use!backbone', 'model/under/test'], (_, Backbone, model) ->
  describe "suite description...", -></p>

<pre><code>it "spec description...", -&gt;
  # test code here ...
</code></pre>

<p><code>``
下面是测试用例的代码(</code>collection<code>,</code>model<code>,</code>view`各实现了一个模块的测试, 仅供demo):</p>

<ul>
<li><a href="/examples/coffee-bbb-amd-backbone-rest-contacts/tests/js/spec/collections/contacts.js">Collection测试Dmeo</a></li>
<li><a href="/examples/coffee-bbb-amd-backbone-rest-contacts/tests/js/spec/models/contact.js">Model测试Demo</a></li>
<li><a href="/examples/coffee-bbb-amd-backbone-rest-contacts/tests/js/spec/views/contactitem.js">View测试Demo</a></li>
</ul>


<h2>加载<em>测试模块</em>, 定义测试<code>runner</code></h2>

<p>通过定义模块依赖, 确保在执行<code>runner</code>方法前加载所有的<em>测试模块</em>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SpecRunner  (runner.coffee)</span> <a href='/examples/coffee-bbb-amd-backbone-rest-contacts/tests/coffee/runner.coffee'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># we should add all specs here to make sure all specs are loaded before execution.</span>
</span><span class='line'><span class="nx">define</span> <span class="p">[</span><span class="s2">&quot;spec/models/contact&quot;</span>
</span><span class='line'>        <span class="s2">&quot;spec/collections/contacts&quot;</span>
</span><span class='line'>        <span class="s2">&quot;spec/views/contactitem&quot;</span><span class="p">],</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">runner = </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">jasmineEnv = </span><span class="nx">jasmine</span><span class="p">.</span><span class="nx">getEnv</span><span class="p">()</span>
</span><span class='line'>    <span class="nv">jasmineEnv.updateInterval = </span><span class="mi">1000</span>
</span><span class='line'>    <span class="nv">trivialReporter = </span><span class="k">new</span> <span class="nx">jasmine</span><span class="p">.</span><span class="nx">TrivialReporter</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">jasmineEnv</span><span class="p">.</span><span class="nx">addReporter</span> <span class="nx">trivialReporter</span>
</span><span class='line'>    <span class="nv">jasmineEnv.specFilter = </span><span class="nf">(spec) -&gt;</span>
</span><span class='line'>      <span class="nx">trivialReporter</span><span class="p">.</span><span class="nx">specFilter</span> <span class="nx">spec</span>
</span><span class='line'>    <span class="nx">jasmineEnv</span><span class="p">.</span><span class="nx">execute</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>定义<a href="http://requirejs.org/" title="Require.js">requirejs</a>的配置文件, 执行测试<code>runner</code></h2>

<p>由于我们希望通过一个配置文件同时加载<em>被测模块</em>和<em>测试模块</em>, 因此这里<code>require.config</code>的<code>baseUrl</code>项必须与web应用的该值保持一致.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>require.config  (config.coffee)</span> <a href='/examples/coffee-bbb-amd-backbone-rest-contacts/tests/coffee/config.coffee'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">require</span><span class="p">.</span><span class="nx">config</span>
</span><span class='line'>  <span class="nv">baseUrl: </span><span class="s2">&quot;../app&quot;</span>
</span><span class='line'>  <span class="nv">paths:</span>
</span><span class='line'>    <span class="nv">libs: </span><span class="s2">&quot;../assets/js&quot;</span>
</span><span class='line'>    <span class="nv">jquery: </span><span class="s1">&#39;../assets/js/jquery/1.7.2/jquery&#39;</span>
</span><span class='line'>    <span class="nv">underscore: </span><span class="s1">&#39;../assets/js/underscore/1.3.2/underscore&#39;</span>
</span><span class='line'>    <span class="nv">backbone: </span><span class="s1">&#39;../assets/js/backbone/0.9.2/backbone&#39;</span>
</span><span class='line'>    <span class="nv">text: </span><span class="s1">&#39;../assets/js/require/plugins/text&#39;</span>
</span><span class='line'>    <span class="nv">use: </span><span class="s1">&#39;../assets/js/require/plugins/use&#39;</span>
</span><span class='line'>    <span class="nv">templates: </span><span class="s1">&#39;../assets/templates&#39;</span>
</span><span class='line'>    <span class="nv">spec: </span><span class="s2">&quot;../tests/js/spec&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">use:</span>
</span><span class='line'>    <span class="nv">backbone:</span>
</span><span class='line'>      <span class="nv">deps: </span><span class="p">[</span><span class="s2">&quot;use!underscore&quot;</span><span class="p">,</span> <span class="s2">&quot;jquery&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="nv">attach: </span><span class="s2">&quot;Backbone&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">underscore:</span>
</span><span class='line'>      <span class="nv">attach: </span><span class="s2">&quot;_&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span> <span class="p">[</span><span class="s2">&quot;../tests/js/runner&quot;</span><span class="p">],</span> <span class="nf">(runner) -&gt;</span>
</span><span class='line'>  <span class="nx">runner</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>定义<code>SpecRunner.html</code>, 用来在浏览器端执行策测试代码</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SpecRunner.html  (SpecRunner.html)</span> <a href='/examples/coffee-bbb-amd-backbone-rest-contacts/tests/SpecRunner.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">HTML</span> <span class="nx">PUBLIC</span> <span class="s2">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>
</span><span class='line'>  <span class="s2">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">Jasmine</span> <span class="nx">Spec</span> <span class="nx">Runner</span><span class="o">&lt;</span><span class="err">/title&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">link</span> <span class="nx">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;lib/jasmine.css&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;lib/jasmine.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;lib/jasmine-html.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;lib/sinon.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">data</span><span class="o">-</span><span class="nx">main</span><span class="o">=</span><span class="s2">&quot;js/config&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;../assets/js/require/require.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>下面是<a href="/examples/coffee-bbb-amd-backbone-rest-contacts/tests/SpecRunner.html">测试执行</a>的结果:</p>

<iframe src="http://xiaocong.github.com/examples/coffee-bbb-amd-backbone-rest-contacts/tests/SpecRunner.html" width="100%" scrolling="no"></iframe>


<h2>遗留问题</h2>

<ul>
<li>由于<em>被测模块</em>的加载是由<a href="http://requirejs.org/" title="Require.js">requirejs</a>完成的, 那么如何在加载时mock<em>被测模块</em>的依赖模块?</li>
<li>如何和CI系统集成, 提供命令行方式的浏览器环境进行测试? 尝试过<a href="http://www.envjs.com/">envjs</a>, 但<a href="http://requirejs.org/" title="Require.js">requirejs</a>总在加载模块时出错, 还没能进一步研究出错细节.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[美妙的Coffee-Script]]></title>
    <link href="http://xiaocong.github.com/blog/2012/06/15/beautiful-coffee-script/"/>
    <updated>2012-06-15T14:36:00+08:00</updated>
    <id>http://xiaocong.github.com/blog/2012/06/15/beautiful-coffee-script</id>
    <content type="html"><![CDATA[<p>JavaScript是标准的函数式动态语言, 但却有Java的语法. 用Java的语法写JavaScript的代码, 就好比穿着西装进行散打, 的确很让人别扭.</p>

<p>CoffeeScript对JavaScript的改造刚好切中要害, 用Ruby/Python的语法重新塑造了JavaScript, 抛弃掉Java语法上繁琐的要求, 让人可以用更简洁的方式写出优雅, 可读性更好的语句.</p>

<h2>简洁</h2>

<p>简洁意味着花更少的时间进行<em>coding</em>. 难道不是么? 我相信程序员都愿意去做真正意义的编程, 而不是枯燥地敲键盘<em>coding</em>.</p>

<p>大家可以对比一下CoffeeScript和JavaScript的语法, 看看CoffeeScript的简洁:</p>

<ul>
<li><a href="http://coffeescript.org/#literals">函数</a></li>
<li><a href="http://coffeescript.org/#conditionals">条件</a></li>
<li><a href="http://coffeescript.org/#splats">参数展开</a></li>
<li><a href="http://coffeescript.org/#loops">循环和列表推导</a></li>
<li><a href="http://coffeescript.org/#slices">数组切片</a></li>
<li><a href="http://coffeescript.org/#classes">类和继承</a></li>
<li><a href="http://coffeescript.org/#destructuring">析构赋值</a></li>
</ul>


<p>CoffeeScript的平均代码量估计不超过等价JavaScript代码量的50%.</p>

<!--more-->


<h2>优雅</h2>

<p>Coffee的代码看起来让人赏心悦目, 如同看诗一样:
``` coffeescript</p>

<h1>Assignment:</h1>

<p>number   = 42
opposite = true</p>

<h1>Conditions:</h1>

<p>number = -42 if opposite</p>

<h1>Functions:</h1>

<p>square = (x) -> x * x</p>

<h1>Arrays:</h1>

<p>list = [1, 2, 3, 4, 5]</p>

<h1>Objects:</h1>

<p>math =
  root:   Math.sqrt
  square: square
  cube:   (x) -> x * square x</p>

<h1>Splats:</h1>

<p>race = (winner, runners...) ->
  print winner, runners</p>

<h1>Existence:</h1>

<p>alert "I knew it!" if elvis?</p>

<h1>Array comprehensions:</h1>

<p>cubes = (math.cube num for num in list)
<code>
同样的代码翻译成JavaScript代码, 看起来的心情可能就不一样了:
</code> javascript
var cubes, list, math, num, number, opposite, race, square,
  __slice = [].slice;</p>

<p>number = 42;</p>

<p>opposite = true;</p>

<p>if (opposite) {
  number = -42;
}</p>

<p>square = function(x) {
  return x * x;
};</p>

<p>list = [1, 2, 3, 4, 5];</p>

<p>math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {</p>

<pre><code>return x * square(x);
</code></pre>

<p>  }
};</p>

<p>race = function() {
  var runners, winner;
  winner = arguments[0], runners = 2 &lt;= arguments.length ? __slice.call(arguments, 1) : [];
  return print(winner, runners);
};</p>

<p>if (typeof elvis !== "undefined" &amp;&amp; elvis !== null) {
  alert("I knew it!");
}</p>

<p>cubes = (function() {
  var <em>i, </em>len, <em>results;
  </em>results = [];
  for (<em>i = 0, </em>len = list.length; <em>i &lt; </em>len; _i++) {</p>

<pre><code>num = list[_i];
_results.push(math.cube(num));
</code></pre>

<p>  }
  return _results;
})();
```
一个是诗一般的代码, 另一个就是代码, 看起来心情能一样么?</p>

<h2>可读性</h2>

<p>有谁愿意一次又一次地花时间琢磨<code>for</code>循环到<code>n</code>还是<code>n-1</code>结束呢? 这种琢磨对于软件来说到底有多大意思? 我们是按照自然语言的方式进行思维, 如果也按照自然语言的方式写代码, 那我们的大脑就不会花无谓的时间进行翻译了.</p>

<p>看看下面CoffeeScript的代码， 是不是读完代码就明白了这段代码的意思?
<code>coffeescript
foods = ['broccoli', 'spinach', 'chocolate']
eat food for food in foods when food isnt 'chocolate'
</code>
然后再对照等价的JavaScript代码, 读代码的过程中, 不知道你的大脑需要花多长时间进行翻译?
``` javascript
var food, foods, <em>i, </em>len;</p>

<p>foods = ['broccoli', 'spinach', 'chocolate'];</p>

<p>for (<em>i = 0, </em>len = foods.length; <em>i &lt; </em>len; <em>i++) {
  food = foods[</em>i];
  if (food !== 'chocolate') {</p>

<pre><code>eat(food);
</code></pre>

<p>  }
}
```</p>

<h2>效率</h2>

<p>代码逻辑需要技巧, 而程序逻辑需要智慧. CoffeeScript尽可能地在语法上解决代码逻辑, 而让你的大脑更多地去思考程序逻辑.</p>

<h2>示例</h2>

<p>本示例将地址本的JavaScript的实现改写为CoffeeScript进行实现, 同时增加了Grunt的CoffeeScript编译任务, 主要改动包括:</p>

<ul>
<li>coffee源代码目录: coffee</li>
<li>grunt coffee编译任务: tasks/coffee.js</li>
<li>更改grunt配置文件以支持coffee的编译: grunt.js</li>
</ul>


<p>下面的链接你可以找到所有的源代码:</p>

<ul>
<li><a href="https://github.com/xiaocong/xiaocong.github.com/tree/source/source/examples/bbb-amd-backbone-contacts/">地址本-JavaScript源码</a></li>
<li><a href="https://github.com/xiaocong/xiaocong.github.com/tree/source/source/examples/coffee-bbb-amd-backbone-contacts/">地址本-CoffeeScript源码</a></li>
<li><a href="/examples/coffee-bbb-amd-backbone-contacts/index.html">地址本-CoffeeScript演示</a></li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="http://coffeescript.org/">CoffeeScript官网</a></li>
<li><a href="http://arcturo.github.com/library/coffeescript/">The Little Book on CoffeeScript</a></li>
<li><a href="http://autotelicum.github.com/Smooth-CoffeeScript/">Smooth CoffeeScript</a></li>
</ul>

]]></content>
  </entry>
  
</feed>

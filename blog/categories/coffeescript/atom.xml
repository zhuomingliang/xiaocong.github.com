<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coffeescript | 葱丝瓣酱]]></title>
  <link href="http://xiaocong.github.com/blog/categories/coffeescript/atom.xml" rel="self"/>
  <link href="http://xiaocong.github.com/"/>
  <updated>2012-06-17T23:46:38+08:00</updated>
  <id>http://xiaocong.github.com/</id>
  <author>
    <name><![CDATA[Xiaocong He]]></name>
    <email><![CDATA[xiaocong@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[美妙的Coffee-Script]]></title>
    <link href="http://xiaocong.github.com/blog/2012/06/15/beautiful-coffee-script/"/>
    <updated>2012-06-15T14:36:00+08:00</updated>
    <id>http://xiaocong.github.com/blog/2012/06/15/beautiful-coffee-script</id>
    <content type="html"><![CDATA[<p>JavaScript是标准的函数式动态语言, 但却有Java的语法. 用Java的语法写JavaScript的代码, 就好比穿着西装进行散打, 的确很让人别扭.</p>

<p>CoffeeScript对JavaScript的改造刚好切中要害, 用Ruby/Python的语法重新塑造了JavaScript, 抛弃掉Java语法上繁琐的要求, 让人可以用更简洁的方式写出优雅, 可读性更好的语句.</p>

<h2>简洁</h2>

<p>简洁意味着花更少的时间进行<em>coding</em>. 难道不是么? 我相信程序员都愿意去做真正意义的编程, 而不是枯燥地敲键盘<em>coding</em>.</p>

<p>大家可以对比一下CoffeeScript和JavaScript的语法, 看看CoffeeScript的简洁:</p>

<ul>
<li><a href="http://coffeescript.org/#literals">函数</a></li>
<li><a href="http://coffeescript.org/#conditionals">条件</a></li>
<li><a href="http://coffeescript.org/#splats">参数展开</a></li>
<li><a href="http://coffeescript.org/#loops">循环和列表推导</a></li>
<li><a href="http://coffeescript.org/#slices">数组切片</a></li>
<li><a href="http://coffeescript.org/#classes">类和继承</a></li>
<li><a href="http://coffeescript.org/#destructuring">析构赋值</a></li>
</ul>


<p>CoffeeScript的平均代码量估计不超过等价JavaScript代码量的50%.</p>

<h2>优雅</h2>

<p>Coffee的代码看起来让人赏心悦目, 如同看诗一样:
``` coffeescript</p>

<h1>Assignment:</h1>

<p>number   = 42
opposite = true</p>

<h1>Conditions:</h1>

<p>number = -42 if opposite</p>

<h1>Functions:</h1>

<p>square = (x) -> x * x</p>

<h1>Arrays:</h1>

<p>list = [1, 2, 3, 4, 5]</p>

<h1>Objects:</h1>

<p>math =
  root:   Math.sqrt
  square: square
  cube:   (x) -> x * square x</p>

<h1>Splats:</h1>

<p>race = (winner, runners...) ->
  print winner, runners</p>

<h1>Existence:</h1>

<p>alert "I knew it!" if elvis?</p>

<h1>Array comprehensions:</h1>

<p>cubes = (math.cube num for num in list)
<code>
同样的代码翻译成JavaScript代码, 看起来的心情可能就不一样了:
</code> javascript
var cubes, list, math, num, number, opposite, race, square,
  __slice = [].slice;</p>

<p>number = 42;</p>

<p>opposite = true;</p>

<p>if (opposite) {
  number = -42;
}</p>

<p>square = function(x) {
  return x * x;
};</p>

<p>list = [1, 2, 3, 4, 5];</p>

<p>math = {
  root: Math.sqrt,
  square: square,
  cube: function(x) {</p>

<pre><code>return x * square(x);
</code></pre>

<p>  }
};</p>

<p>race = function() {
  var runners, winner;
  winner = arguments[0], runners = 2 &lt;= arguments.length ? __slice.call(arguments, 1) : [];
  return print(winner, runners);
};</p>

<p>if (typeof elvis !== "undefined" &amp;&amp; elvis !== null) {
  alert("I knew it!");
}</p>

<p>cubes = (function() {
  var <em>i, </em>len, <em>results;
  </em>results = [];
  for (<em>i = 0, </em>len = list.length; <em>i &lt; </em>len; _i++) {</p>

<pre><code>num = list[_i];
_results.push(math.cube(num));
</code></pre>

<p>  }
  return _results;
})();
```
一个是诗一般的代码, 另一个就是代码, 看起来心情能一样么?</p>

<h2>可读性</h2>

<p>有谁愿意一次又一次地花时间琢磨<code>for</code>循环到<code>n</code>还是<code>n-1</code>结束呢? 这种琢磨对于软件来说到底有多大意思? 我们是按照自然语言的方式进行思维, 如果也按照自然语言的方式写代码, 那我们的大脑就不会花无谓的时间进行翻译了.</p>

<p>看看下面CoffeeScript的代码:
``` coffeescript
foods = ['broccoli', 'spinach', 'chocolate']</p>

<p>eat food for food in foods when food isnt 'chocolate'
<code>
然后再对照等价的JavaScript代码:
</code> javascript
var food, foods, <em>i, </em>len;</p>

<p>foods = ['broccoli', 'spinach', 'chocolate'];</p>

<p>for (<em>i = 0, </em>len = foods.length; <em>i &lt; </em>len; <em>i++) {
  food = foods[</em>i];
  if (food !== 'chocolate') {</p>

<pre><code>eat(food);
</code></pre>

<p>  }
}
```
基本不用怎么思考, 我们就能看懂CoffeeScript的代码, 但是对于JavaScript代码, 我们的大脑需要翻译才能看懂.</p>

<h2>效率</h2>

<p>代码逻辑需要技巧, 而程序逻辑需要智慧. CoffeeScript尽可能地在语法上解决代码逻辑, 而让你的大脑更多地去思考程序逻辑.</p>

<h2>示例</h2>

<p>本示例将地址本的JavaScript的实现改写为CoffeeScript进行实现, 同时增加了Grunt的CoffeeScript编译任务, 主要改动包括:</p>

<ul>
<li>coffee源代码目录: coffee</li>
<li>grunt coffee编译任务: tasks/coffee.js</li>
<li><p>更改grunt配置文件以支持coffee的编译: grunt.js</p></li>
<li><p><a href="https://github.com/xiaocong/xiaocong.github.com/tree/source/source/examples/bbb-amd-backbone-contacts/">地址本-JavaScript源码</a></p></li>
<li><a href="https://github.com/xiaocong/xiaocong.github.com/tree/source/source/examples/coffee-bbb-amd-backbone-contacts/">地址本-CoffeeScript源码</a></li>
<li><a href="/examples/coffee-bbb-amd-backbone-contacts/index.html">地址本-CoffeeScript演示</a></li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="http://coffeescript.org/">CoffeeScript官网</a></li>
<li><a href="http://arcturo.github.com/library/coffeescript/">The Little Book on CoffeeScript</a></li>
<li><a href="http://autotelicum.github.com/Smooth-CoffeeScript/">Smooth CoffeeScript</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
